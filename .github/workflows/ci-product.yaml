name: product-catalog-ci-full

on: 
  pull_request:
    branches:
      - main

jobs:
  build-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go 1.24.6
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.6
      
      - name: Build and test
        working-directory: src/product-catalog
        run: |
          go mod tidy
          go build -o product-catalog-service .
          go test -v ./...
      
      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          working-directory: src/product-catalog
          args: "--issues-exit-code=0"

  security-scans:
    runs-on: ubuntu-latest
    needs: [build-and-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
        
      - name: Build and test
        working-directory: src/product-catalog
        run: |
          go mod tidy
          go build -o product-catalog-service .
          go test -v ./...

      - name: Build Docker image for Trivy scan
        working-directory: src/product-catalog
        run: docker build -t product-catalog-service:${{ github.run_id }} .
      # Scan Infrastructure as Code (IaC) files for misconfigurations
      # - name: Run Checkov IaC scan
      #   uses: bridgecrewio/checkov-action@v2
      #   with:
      #     directory: kubernetes/productcatalog
      #     framework: kubernetes
      #     skip_check: CKV_K8S_21,CKV_K8S_22

      # Scan Dockerfile and built image for vulnerabilities
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: 'product-catalog-service:${{ github.run_id }}'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

  docker-setup:
    runs-on: ubuntu-latest
    needs: [security-scans]
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.18.0
        with:
          context: src/product-catalog  
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{github.run_id}} 
      
  update-kubernetes:
    runs-on: ubuntu-latest
    needs: docker-setup
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0
      - name: Update tag in Kubernetes deployment file/manifest
        run: |
          sed -i 's|image: .*|image: '"${{ secrets.DOCKER_USERNAME }}"'/product-catalog:'"${{github.run_id}}"'|g' kubernetes/productcatalog/deploy.yaml

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Action [Bot]"
          git config --global user.email ""
          git add kubernetes/productcatalog/deploy.yaml
          git commit -m "[Github Actions - CI] Update image tag to ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{github.run_id}}"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/richards-okiemute/DevOps-End-To-End-E-Commerce-App-Deployment-with-AWS-EKS.git
          git push origin HEAD:main
